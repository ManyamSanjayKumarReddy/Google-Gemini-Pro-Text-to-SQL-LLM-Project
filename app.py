from dotenv import load_dotenv
import streamlit as st
import os
import sqlite3
import google.generativeai as genai
import csv

# Load environment variables
load_dotenv()

# Configure API KEY
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to handle errors and provide emotional responses
def handle_errors(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
            st.warning("Please check your input and try again.")
    return wrapper

# Function to load Google Gemini model and Provide SQL Query as the Response
@handle_errors
def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0], question])

    # Remove formatting (```sql) from the response
    clean_response = response.text.replace("```sql", "").strip()

    # Split multiple statements into a list
    sql_statements = [statement.strip() for statement in clean_response.split(';') if statement.strip()]

    return sql_statements, response.text

# Function to Retrieve query from the SQL Database
@handle_errors
def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()

    if not rows:
        st.warning("No data found for the given query.")
    else:
        st.subheader("SQL Query Result:")
        st.table(rows)
    return rows

# Function to save history to CSV file
def save_to_csv(question, query):
    csv_filename = "response_history.csv"
    header = ["Question", "Query"]

    # Check if the file exists, create if not
    if not os.path.isfile(csv_filename):
        with open(csv_filename, 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)
            csv_writer.writerow(header)

    # Append the new entry to the CSV file
    with open(csv_filename, 'a', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow([question, query])

# Function to get top searches from history
def get_top_searches():
    history_data = []
    csv_filename = "response_history.csv"
    top_searches = []

    if os.path.isfile(csv_filename):
        with open(csv_filename, 'r') as csvfile:
            csv_reader = csv.reader(csvfile)
            header = next(csv_reader)
            for row in csv_reader:
                history_data.append(row)

        # Count occurrences of each question
        question_count = {}
        for entry in history_data:
            question = entry[0]
            question_count[question] = question_count.get(question, 0) + 1

        # Get top searches based on count
        top_searches = sorted(question_count.items(), key=lambda x: x[1], reverse=True)[:5]

    return top_searches

# Streamlit App
st.set_page_config(page_title="Student Data Analyzer", layout="wide")
st.title("Student Data Analyzer Application using Google Gemini Pro")

# Sidebar Features
st.sidebar.title("Features")
st.sidebar.markdown("- Ask SQL-related questions about the MASTER database.")
st.sidebar.markdown("- View responses generated by Google Gemini Pro.")
st.sidebar.markdown("- Retrieve and display data from the MASTER database.")
st.sidebar.markdown("- Handle errors and provide informative messages.")
st.sidebar.markdown("- User-friendly interface with Streamlit.")
st.sidebar.markdown("- Real-time interaction and feedback.")

# Define Your Prompt
prompt = [
    """
    You are an expert in converting English questions to SQL queries!
    The SQL database has the name MASTER and includes various columns such as 
    Name, Registration, DOB, Gender, Department, Section, 
    Specialization, CGPA, Active Backlogs, History Arrears, Academic Gap, 
    Diploma-Percentage, Diploma-Specialization, 12-Percentage, 10th-Percentage, 
    Aadhar, PAN, City, City Pincode, District, State, Mobile-1, Email.
    
    Feel free to ask any SQL-related questions about the MASTER database. Here are some sample questions:
    
    1. Retrieve all records for students with a CGPA greater than 8.
    2. Find the count of students with active backlogs.
    3. Show details for students who have an academic gap of more than 1 year.
    4. Get the average CGPA for students in the 'Data Science' UG-Specialization.
    5. Find students from a specific city and state.
    6. Show the top 5 students based on their 12th percentage.
    7. Retrieve details for students born after a certain date.
    
    Remember, these are just sample questions. You can ask any SQL question, and I'll provide you with the corresponding SQL query.
    
    also, the SQL code should not have ``` in the beginning or end and sql word in output.
    """
]

question = st.text_input("Input: ", key="input", placeholder = "Give me the List of Students with CGPA Greater than 9.01")
ask_button = st.button("Ask the Question‚ùì")


# If submit is clicked
if ask_button:
    with st.spinner("Fetching response..."):
        responses, full_response = get_gemini_response(question, prompt)
    
    for response in responses:
        print(response)
        data = read_sql_query(response, "master.db")
        
        # Save to CSV
        save_to_csv(question, full_response)

# Get and display top searches with custom CSS
top_searches = get_top_searches()
if top_searches:
    st.subheader("Recent Searches üìà")

    # Custom CSS for small containers in a row
    css = """
    <style>
        .top-search-container {
            color:black;
            display: inline;
            margin: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 12px;
            background-color: #f9f9f9;
            box-shadow: 2px 2px 5px #aaa;
            width: 200px; /* Adjust the width as needed */
            font-size: 12px;
            font-weight: bold;
        }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

    # Display top searches in a row
    row_html = ""
    for search, count in top_searches:
        row_html += f'<div class="top-search-container">{search}</div>'
    
    st.markdown(f'<div style="white-space: nowrap;">{row_html}</div> <br>', unsafe_allow_html=True)
else:
    st.warning("No top searches available.")

# Add an empty space between buttons
empty_space = st.empty()


# Position "View History" button at the right corner
view_history_button = empty_space.button("View History ‚ö†Ô∏è")

# If view history button is clicked
if view_history_button:
    history_data = []
    csv_filename = "response_history.csv"
    if os.path.isfile(csv_filename):
        with open(csv_filename, 'r') as csvfile:
            csv_reader = csv.reader(csvfile)
            header = next(csv_reader)
            for row in csv_reader:
                history_data.append(row)

        # Display history in a table
        if history_data:
            st.subheader("Response History:")
            st.table(history_data)
        else:
            st.warning("No history data available.")
    else:
        st.warning("No history file found.")


# Copyright and Acknowledgment
st.markdown(
    """
    ---
    Copyright ¬© 2024 Student Data Analyzer | Designed and Maintained by Mnayam Sanjay Kumar Reddy
    """
)

# Contact Information
st.markdown(
    """
    Contact +91 7601003069 for any Collaborations and Feedback üìû
    """
)